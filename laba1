#include <iostream>
#include <cstdlib>
#include <immintrin.h>
#include <windows.h>


#define l 2048
#define m 512
#define n 2048


using namespace std;


void fillMatrix(float**& Matrix, int line1, int column1) {
	for (int i = 0; i < line1; i++)
		for (int j = 0; j < column1; j++)
			Matrix[i][j] = rand() % 20 + 1;
}


float** initialize(int line1, int column1) {
	float** arr = new float* [line1];
	for (int x = 0; x < line1; x++)
		arr[x] = new float[column1];
	return arr;
}


void vecMul(int L, int N, int M, float** A, float** B, float** C)
{
	for (int i = 0; i < L; ++i)
	{
		float* c = C[i];
		for (int j = 0; j < N; ++j)
			c[j] = 0;
		for (int k = 0; k < M; ++k)
		{
			const float* b = B[k];
			float a = A[i][k];
			for (int j = 0; j < N; ++j)
				c[j] += a * b[j];
		}
	}
}


void Mul(int L, int N, int M, float** A, float** B, float** C)
{
	for (int i = 0; i < L; ++i)
	{
		float* c = C[i];
		for (int j = 0; j < N; ++j)
			c[j] = 0;
		for (int k = 0; k < M; ++k)
		{
			const float* b = B[k];
			float a = A[i][k];
#pragma loop(no_vector)
				for (int j = 0; j < N; ++j)
					c[j] += a * b[j];
		}
	}
}



void vecMulIns(int L, int N, int M, float** A, float** B, float** C)
{
	for (int i = 0; i < L; ++i)
	{
		for (int j = 0; j < N; j += 8)
			_mm256_storeu_ps(C[i] + j, _mm256_setzero_ps());
		for (int k = 0; k < M; ++k)
		{
			__m256 a = _mm256_set1_ps(A[i][k]);
			for (int j = 0; j < N; j += 8)
			{
				_mm256_storeu_ps(C[i] + j, _mm256_fmadd_ps(a,
					_mm256_loadu_ps(B[k] + j), _mm256_loadu_ps(C[i] + j)));
				/**(__m256*)(C[i] + j) = _mm256_fmadd_ps(a,
					*(__m256*)(B[k] + j), *(__m256*)(C[i] + j));*/
			}
		}
	}
}


void main() {



	float** A = initialize(l, m);
	float** B = initialize(m, n);
	float** C = initialize(l, n);
	float** C_Ins = initialize(l, n);
	float** C_Without = initialize(l, n);

	fillMatrix(A, l, m);
	fillMatrix(B, m, n);


	auto start_clocks = GetTickCount64();
	vecMul(l, n, m, A, B, C);
	auto end_clocks = GetTickCount64();
	cout << end_clocks - start_clocks << " msecs AutoVect" << endl;

	start_clocks = GetTickCount64();
	vecMulIns(l, n, m, A, B, C_Ins);
	end_clocks = GetTickCount64();
	cout << end_clocks - start_clocks << " msecs ManualVect" << endl;
	
	start_clocks = GetTickCount64();
	Mul(l, n, m, A, B, C_Without);
	end_clocks = GetTickCount64();
	cout << end_clocks - start_clocks << " msecs WithoutAutoVect" << endl;
	


	for (int i = 0; i < l; i++)
		for (int j = 0; j < n; j++)
			if (C[i][j] != C_Ins[i][j]) cout << "Matrix(C, C_Ins) not equal" << endl;
			else if ((i == l - 1) && (j == n - 1) && (C[i][j] == C_Ins[i][j])) cout << "Matrix(C, C_Ins) are equal" << endl;
	for (int i = 0; i < l; i++)
		for (int j = 0; j < n; j++)
			if (C_Ins[i][j] != C_Without[i][j]) cout << "Matrix(C_Ins, C_Without) not equal" << endl;
			else if ((i == l - 1) && (j == n - 1) && (C_Ins[i][j] == C_Without[i][j])) cout << "Matrix(C_Ins, C_Without) are equal" << endl;
}
